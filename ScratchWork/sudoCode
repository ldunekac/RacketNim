// SUDO CODE

// start game
(Nim board (player player))

define Nim board players
    makeMove(makeBaord baord players)
    
define makeNumberBoard board
    define helper boardRow acc
        cond null boardRow acc
        helper (cdr boardRow +1 acc)
    case null board ()
    case _ cons helper( board 0) makeNumberBoard cdr board
    
makeMove (board players)
    if emptyboard
        win cadr players
    case Human => HumanInput(board, players)
    case Random => RandomInput(board players)
    case Smart => SmartInput(board players)
    
define playerInput(board players)
        begin
        print board
        print car players " enter a row:"
        input row
        print car players "enter take amount:"
        input take
        if(!correctInput?)
            playerInput(board players)
        else
          makeMove(updateBoard (row amount), reverse players)

define RandomInput(board players)
    define randRow(row board solidboard)
        cond row == 1
            if car board != 0   list row rnad car baord
            RandomInput(solidboard players)
        randRow(row - 1, cdr board, solidboard)
        
    makemove (updateboard( randRow(rand lenth baord board)) reverse playres)
    

define SmartInput(board playres)
        MakeMove(SmartCompare(baord players bitwisor borad) reverse players)
        
define SmartCompare( board players bitwisor)
        case (bitwise car(board) < car(board) => cons (bitiwse car baord ) cdr baord
        case _ => cons car board(players board bitwisor)
    
defin NumberAt(row board)
    case eq row 1 => car board
    case _ => NumberAt (row -1) (cdr board)
    
define correctInput?(board, row, many)
   define correctTake(rowNumber, many)
        if rowNumber <= many (true)(false)

    case (board null) false
    case row = 1 => correctTake(car board, many)
    case _ => correctINput?(cdr baord, (row -1), many)
   
updateBaord (borad, row, many)
    case row == 1 => cons ((car row) - many) (cdr board)
    case _ => updateBoard(cdr board, row -1 , many)
    
define Win(string (p1 or p2 or cmp), Name)       
       case p1 => print "You win"
       case _ => print "p2 won"
       
define rowWithMaxNumber(board)
    define helper (board, maxRow, maxNumber, rowInc)
        case null board => maxRow
        case (car baord) > maxNumber => helper(cdr board, rowInc, (car Baord), rowInc+1)
        case _ => maxNumber(cdr board, maxRow, maxNumber, rowInc + 1)
        
define printboard(baord)
    define printXs rowVal
        case num == 1 (fprintf "X")
        case _ => begin (fprintf "X") (printXs rowVal -1 )
    define printBoard1(board row)
        case null board #t
        case _=>
            begin
            fprintf("Row %i", row)
            printXs(car baord)
            printBoard1(cdr board, row + 1)
    printBoard1(board , 1)
    
    /////////////////////
    (fprintf (current-output-port)
           "~a as a string is ~s.\n"
           '(3 4)
           "(3 4)")
(3 4) as a string is "(3 4)".